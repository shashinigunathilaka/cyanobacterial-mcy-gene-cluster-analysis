theme(axis.text.x = element_text(angle=45, hjust=1),
panel.grid = element_blank())
# 5. Save the heatmap
plot_dir <- "E:/Research/Research/MSA/plots"
if (!dir.exists(plot_dir)) dir.create(plot_dir, recursive = TRUE)
heatmap_file <- file.path(plot_dir, "mcy_mutation_heatmap_colorful.png")
ggsave(heatmap_file, p, width=6, height=4, dpi=300)
cat("Heatmap saved to:", heatmap_file, "\n")
library(ggplot2)
library(dplyr)
library(tidyr)
# 1. Define genes, orders, and file paths
genes <- c("mcyA", "mcyB", "mcyE", "mcyH")
orders <- c("Chroococcales", "Nostocales", "Oscillatoriales")
base_path <- "E:/Research/Research/MSA"
# 2. Read and combine all data
all_data <- do.call(rbind, lapply(genes, function(gene) {
do.call(rbind, lapply(orders, function(order) {
file <- file.path(base_path, order, paste0(tolower(gene), "_mutation_summary.tsv"))
if (file.exists(file)) {
df <- read.table(file, header=TRUE, sep="\t", fill=TRUE, stringsAsFactors=FALSE)
df <- df[!is.na(as.numeric(df$Mutations)), ]
df$Mutations <- as.numeric(df$Mutations)
df$Order <- order
df$Gene <- gene
df
}
}))
}))
# 3. Calculate average mutations per gene/order
heatmap_data <- all_data %>%
group_by(Gene, Order) %>%
summarise(AvgMutations = mean(Mutations), .groups = "drop")
# 4. Plot heatmap: red theme, smaller boxes
p <- ggplot(heatmap_data, aes(x=Order, y=Gene, fill=AvgMutations)) +
geom_tile(color="white", width=0.7, height=0.7) +  # smaller boxes
scale_fill_gradient(low="white", high="red", name="Avg Mutations", na.value="grey90") +
labs(title="Average mcy Gene Mutations by Order",
x="Order", y="Gene") +
theme_minimal(base_size=14) +
theme(axis.text.x = element_text(angle=45, hjust=1),
panel.grid = element_blank())
# 5. Save the heatmap
plot_dir <- "E:/Research/Research/MSA/plots"
if (!dir.exists(plot_dir)) dir.create(plot_dir, recursive = TRUE)
heatmap_file <- file.path(plot_dir, "mcy_mutation_heatmap_red.png")
ggsave(heatmap_file, p, width=4, height=3, dpi=300)  # smaller plot
cat("Heatmap saved to:", heatmap_file, "\n")
library(dplyr)
library(tidyr)
library(ggplot2)
if (!requireNamespace("RColorBrewer", quietly = TRUE)) install.packages("RColorBrewer")
library(RColorBrewer)
# 1. Define genes, orders, and file paths
genes <- c("mcyA", "mcyB", "mcyE", "mcyH")
orders <- c("Chroococcales", "Nostocales", "Oscillatoriales")
base_path <- "E:/Research/Research/MSA"
# 2. Read and combine all data
all_data <- do.call(rbind, lapply(genes, function(gene) {
do.call(rbind, lapply(orders, function(order) {
file <- file.path(base_path, order, paste0(tolower(gene), "_mutation_summary.tsv"))
if (file.exists(file)) {
df <- read.table(file, header=TRUE, sep="\t", fill=TRUE, stringsAsFactors=FALSE)
df <- df[!is.na(as.numeric(df$Mutations)), ]
df$Mutations <- as.numeric(df$Mutations)
df$Order <- order
df$Gene <- gene
df
}
}))
}))
# 3. Calculate average mutations per gene/order
heatmap_data <- all_data %>%
group_by(Gene, Order) %>%
summarise(AvgMutations = mean(Mutations), .groups = "drop")
# 4. Convert to wide format for heatmap (optional, for inspection)
heatmap_matrix <- pivot_wider(heatmap_data, names_from = Order, values_from = AvgMutations)
# 5. Plot heatmap using ggplot2, red theme, no numbers, more visible low values
reds <- brewer.pal(9, "Reds")
p <- ggplot(heatmap_data, aes(x=Order, y=Gene, fill=AvgMutations)) +
geom_tile(color="white", width=0.7, height=0.7) +
scale_fill_gradientn(colors=reds, name="Avg Mutations", na.value="grey90") +
labs(title="Average mcy Gene Mutations by Order",
x="Order", y="Gene") +
theme_minimal(base_size=14) +
theme(axis.text.x = element_text(angle=45, hjust=1),
panel.grid = element_blank())
# 6. Save the heatmap
plot_dir <- "E:/Research/Research/MSA/plots"
if (!dir.exists(plot_dir)) dir.create(plot_dir, recursive = TRUE)
heatmap_file <- file.path(plot_dir, "mcy_mutation_heatmap.png")
ggsave(heatmap_file, p, width=6, height=4, dpi=300)
cat("Heatmap saved to:", heatmap_file, "\n")
library(dplyr)
library(tidyr)
library(ggplot2)
# 1. Define genes, orders, and file paths
genes <- c("mcyA", "mcyB", "mcyE", "mcyH")
orders <- c("Chroococcales", "Nostocales", "Oscillatoriales")
base_path <- "E:/Research/Research/MSA"
# 2. Read and combine all data
all_data <- do.call(rbind, lapply(genes, function(gene) {
do.call(rbind, lapply(orders, function(order) {
file <- file.path(base_path, order, paste0(tolower(gene), "_mutation_summary.tsv"))
if (file.exists(file)) {
df <- read.table(file, header=TRUE, sep="\t", fill=TRUE, stringsAsFactors=FALSE)
df <- df[!is.na(as.numeric(df$Mutations)), ]
df$Mutations <- as.numeric(df$Mutations)
df$Order <- order
df$Gene <- gene
df
}
}))
}))
# 3. Calculate average mutations per gene/order
heatmap_data <- all_data %>%
group_by(Gene, Order) %>%
summarise(AvgMutations = mean(Mutations), .groups = "drop")
# 4. Plot heatmap: continuous red gradient, no borders, no numbers
p <- ggplot(heatmap_data, aes(x=Order, y=Gene, fill=AvgMutations)) +
geom_tile(color=NA) +
scale_fill_gradient(
low = "#fff5f0",  # very light red
high = "#de2d26", # strong red
name = "Avg Mutations",
na.value = "grey90"
) +
labs(title="Average mcy Gene Mutations by Order",
x="Order", y="Gene") +
theme_minimal(base_size=14) +
theme(
axis.text.x = element_text(angle=45, hjust=1),
panel.grid = element_blank()
)
# 5. Save the heatmap
plot_dir <- "E:/Research/Research/MSA/plots"
if (!dir.exists(plot_dir)) dir.create(plot_dir, recursive = TRUE)
heatmap_file <- file.path(plot_dir, "mcy_mutation_heatmap_red_continuous.png")
ggsave(heatmap_file, p, width=6, height=4, dpi=300)
cat("Heatmap saved to:", heatmap_file, "\n")
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
# 1. Set directory and list all CSVs
matrix_dir <- "E:/Research/Research/MSA/feature_matrices"
csv_files <- list.files(matrix_dir, pattern="*_mutation_matrix.csv", full.names=TRUE)
# 2. Read and combine all CSVs
all_long <- do.call(rbind, lapply(csv_files, function(f) {
# Extract gene and order from filename
fname <- basename(f)
m <- str_match(fname, "^([A-Za-z]+)_([A-Za-z]+)_mutation_matrix\\.csv$")
if (is.na(m[1,1])) return(NULL)
order <- m[1,2]
gene <- m[1,3]
mat <- read.csv(f, row.names=1, check.names=FALSE)
mat$SeqHeader <- rownames(mat)
long <- mat %>%
pivot_longer(-SeqHeader, names_to="Position", values_to="Mutation")
long$Gene <- gene
long$Order <- order
long
}))
# 3. Make factors for better ordering in plot
all_long$Gene <- factor(all_long$Gene, levels=c("mcyA", "mcyB", "mcyE", "mcyH"))
all_long$Order <- factor(all_long$Order, levels=c("Chroococcales", "Nostocales", "Oscillatoriales"))
# 4. Plot: Heatmap, faceted by gene, y=Order, x=Position, color=Mutation
p <- ggplot(all_long, aes(x=Position, y=Order, fill=factor(Mutation))) +
geom_tile(color=NA) +
scale_fill_manual(values=c("0"="white", "1"="red"), name="Mutation", labels=c("No", "Yes")) +
facet_wrap(~ Gene, ncol=1, scales="free_x") +
labs(title="Mutation Presence/Absence Across Genes and Orders",
x="Alignment Position", y="Order") +
theme_minimal(base_size=12) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid = element_blank(),
strip.text = element_text(size=14),
legend.position="top")
# 5. Save the plot
plot_dir <- "E:/Research/Research/MSA/plots"
if (!dir.exists(plot_dir)) dir.create(plot_dir, recursive = TRUE)
heatmap_file <- file.path(plot_dir, "all_genes_orders_mutation_heatmap.png")
ggsave(heatmap_file, p, width=12, height=6, dpi=300)
cat("Heatmap saved to:", heatmap_file, "\n")
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if (!requireNamespace("Biostrings", quietly = TRUE)) BiocManager::install("Biostrings")
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
# 1. Set directory and list all one-hot CSVs
onehot_dir <- "E:/Research/Research/MSA/feature_matrices_onehot"
csv_files <- list.files(onehot_dir, pattern="*_onehot_matrix.csv", full.names=TRUE)
# 2. Read and combine all CSVs
all_long <- do.call(rbind, lapply(csv_files, function(f) {
# Extract order and gene from filename
fname <- basename(f)
m <- str_match(fname, "^([A-Za-z]+)_([A-Za-z]+)_onehot_matrix\\.csv$")
if (is.na(m[1,1])) return(NULL)
order <- m[1,2]
gene <- m[1,3]
mat <- read.csv(f, row.names=1, check.names=FALSE)
mat$SeqHeader <- rownames(mat)
long <- mat %>%
pivot_longer(-SeqHeader, names_to="Feature", values_to="Value")
long$Gene <- gene
long$Order <- order
long
}))
# Try reading with row.names=1, but if it fails, fix the header
read_onehot <- function(f) {
lines <- readLines(f)
# If the first line starts with a comma, add a name
if (startsWith(lines[1], ",")) {
lines[1] <- paste0("SeqHeader", lines[1])
tmp <- tempfile(fileext = ".csv")
writeLines(lines, tmp)
mat <- read.csv(tmp, row.names=1, check.names=FALSE)
unlink(tmp)
} else {
mat <- read.csv(f, row.names=1, check.names=FALSE)
}
mat$SeqHeader <- rownames(mat)
mat
}
all_long <- do.call(rbind, lapply(csv_files, function(f) {
fname <- basename(f)
m <- str_match(fname, "^([A-Za-z]+)_([A-Za-z]+)_onehot_matrix\\.csv$")
if (is.na(m[1,1])) return(NULL)
order <- m[1,2]
gene <- m[1,3]
mat <- read_onehot(f)
long <- mat %>%
pivot_longer(-SeqHeader, names_to="Feature", values_to="Value")
long$Gene <- gene
long$Order <- order
long
}))
# Try reading with row.names=1, but if it fails, fix the header
read_onehot <- function(f) {
lines <- readLines(f)
# If the first line starts with a comma, add a name
if (startsWith(lines[1], ",")) {
lines[1] <- paste0("SeqHeader", lines[1])
tmp <- tempfile(fileext = ".csv")
writeLines(lines, tmp)
mat <- read.csv(tmp, row.names=1, check.names=FALSE)
unlink(tmp)
} else {
mat <- read.csv(f, row.names=1, check.names=FALSE)
}
mat$SeqHeader <- rownames(mat)
mat
}
all_long <- do.call(rbind, lapply(csv_files, function(f) {
fname <- basename(f)
m <- str_match(fname, "^([A-Za-z]+)_([A-Za-z]+)_onehot_matrix\\.csv$")
if (is.na(m[1,1])) return(NULL)
order <- m[1,2]
gene <- m[1,3]
mat <- read_onehot(f)
long <- mat %>%
pivot_longer(-SeqHeader, names_to="Feature", values_to="Value")
long$Gene <- gene
long$Order <- order
long
}))
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
# 1. Set directory and list all one-hot CSVs
onehot_dir <- "E:/Research/Research/MSA/feature_matrices_onehot"
csv_files <- list.files(onehot_dir, pattern="*_onehot_matrix.csv", full.names=TRUE)
# 2. Read and combine all CSVs
all_long <- do.call(rbind, lapply(csv_files, function(f) {
# Extract order and gene from filename
fname <- basename(f)
m <- str_match(fname, "^([A-Za-z]+)_([A-Za-z]+)_onehot_matrix\\.csv$")
if (is.na(m[1,1])) return(NULL)
order <- m[1,2]
gene <- m[1,3]
mat <- read.csv(f, row.names=1, check.names=FALSE)
mat$SeqHeader <- rownames(mat)
long <- mat %>%
pivot_longer(-SeqHeader, names_to="Feature", values_to="Value")
long$Gene <- gene
long$Order <- order
long
}))
# Replace with your actual file path
f <- "E:/Research/Research/MSA/feature_matrices_onehot/Chroococcales_mcyA_onehot_matrix.csv"
# Read the first 5 lines
lines <- readLines(f, n = 5)
cat(lines, sep = "\n")
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
# 1. Set directory and list all CSVs
matrix_dir <- "E:/Research/Research/MSA/feature_matrices"
csv_files <- list.files(matrix_dir, pattern="*_mutation_matrix.csv", full.names=TRUE)
# 2. Read and combine all CSVs
all_long <- do.call(rbind, lapply(csv_files, function(f) {
# Extract gene and order from filename
fname <- basename(f)
m <- str_match(fname, "^([A-Za-z]+)_([A-Za-z]+)_mutation_matrix\\.csv$")
if (is.na(m[1,1])) return(NULL)
order <- m[1,2]
gene <- m[1,3]
mat <- read.csv(f, row.names=1, check.names=FALSE)
mat$SeqHeader <- rownames(mat)
long <- mat %>%
pivot_longer(-SeqHeader, names_to="Position", values_to="Mutation")
long$Gene <- gene
long$Order <- order
long
}))
# 3. Make factors for better ordering in plot
all_long$Gene <- factor(all_long$Gene, levels=c("mcyA", "mcyB", "mcyE", "mcyH"))
all_long$Order <- factor(all_long$Order, levels=c("Chroococcales", "Nostocales", "Oscillatoriales"))
# 4. Plot: Heatmap, faceted by gene, y=Order, x=Position, color=Mutation
p <- ggplot(all_long, aes(x=Position, y=Order, fill=factor(Mutation))) +
geom_tile(color=NA) +
scale_fill_manual(values=c("0"="white", "1"="red"), name="Mutation", labels=c("No", "Yes")) +
facet_wrap(~ Gene, ncol=1, scales="free_x") +
labs(title="Mutation Presence/Absence Across Genes and Orders",
x="Alignment Position", y="Order") +
theme_minimal(base_size=12) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid = element_blank(),
strip.text = element_text(size=14),
legend.position="top")
# 5. Save the plot
plot_dir <- "E:/Research/Research/MSA/plots"
if (!dir.exists(plot_dir)) dir.create(plot_dir, recursive = TRUE)
heatmap_file <- file.path(plot_dir, "all_genes_orders_mutation_heatmap.png")
ggsave(heatmap_file, p, width=12, height=6, dpi=300)
cat("Heatmap saved to:", heatmap_file, "\n")
library(ggplot2)
library(dplyr)
# Example structure for mutation_types_long:
# mutation_types_long <- data.frame(
#   Gene = c("mcyA", "mcyA", "mcyA", "mcyB", ...),
#   Order = c("Chroococcales", "Chroococcales", "Nostocales", ...),
#   MutationType = c("missense", "frameshift", "missense", ...),
#   Percent = c(10, 5, 8, ...)
# )
# Make factors for better ordering
mutation_types_long$Gene <- factor(mutation_types_long$Gene, levels=c("mcyA", "mcyB", "mcyE", "mcyH"))
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
# 1. Set directory and list all CSVs
matrix_dir <- "E:/Research/Research/MSA/feature_matrices"
csv_files <- list.files(matrix_dir, pattern="*_mutation_matrix.csv", full.names=TRUE)
# 2. Read and combine all CSVs
all_long <- do.call(rbind, lapply(csv_files, function(f) {
# Extract gene and order from filename
fname <- basename(f)
m <- str_match(fname, "^([A-Za-z]+)_([A-Za-z]+)_mutation_matrix\\.csv$")
if (is.na(m[1,1])) return(NULL)
order <- m[1,2]
gene <- m[1,3]
mat <- read.csv(f, row.names=1, check.names=FALSE)
mat$SeqHeader <- rownames(mat)
long <- mat %>%
pivot_longer(-SeqHeader, names_to="Position", values_to="Mutation")
long$Gene <- gene
long$Order <- order
long
}))
# 3. Make factors for better ordering in plot
all_long$Gene <- factor(all_long$Gene, levels=c("mcyA", "mcyB", "mcyE", "mcyH"))
all_long$Order <- factor(all_long$Order, levels=c("Chroococcales", "Nostocales", "Oscillatoriales"))
# 4. Plot: Heatmap, faceted by gene and order, y=SeqHeader, x=Position, color=Mutation
p <- ggplot(all_long, aes(x=Position, y=SeqHeader, fill=factor(Mutation))) +
geom_tile(color=NA) +
scale_fill_manual(values=c("0"="white", "1"="red"), name="Mutation", labels=c("No", "Yes")) +
facet_grid(Order ~ Gene, scales="free_x", space="free_x") +
labs(title="Mutation Presence/Absence Matrix (All Genes & Orders)",
x="Alignment Position", y="Sequence") +
theme_minimal(base_size=10) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid = element_blank(),
strip.text = element_text(size=12),
legend.position="top"
)
# 5. Save the plot
plot_dir <- "E:/Research/Research/MSA/plots"
if (!dir.exists(plot_dir)) dir.create(plot_dir, recursive = TRUE)
heatmap_file <- file.path(plot_dir, "all_genes_orders_mutation_matrix_heatmap.png")
ggsave(heatmap_file, p, width=16, height=8, dpi=300)
cat("Heatmap saved to:", heatmap_file, "\n")
library(ggplot2)
library(dplyr)
library(readr)
# 1. Read mutation type summary data
mutation_types_long <- read_csv("E:/Research/Research/MSA/feature_matrices/mutation_types_summary.csv")
library(ggplot2)
library(dplyr)
summary_file <- "E:/Research/Research/MSA/feature_matrices/mutation_matrix_summary.csv"
summary_df <- read.csv(summary_file)
summary_df$Gene <- factor(summary_df$Gene, levels=c("mcyA", "mcyB", "mcyE", "mcyH"))
summary_df$Order <- factor(summary_df$Order, levels=c("Chroococcales", "Nostocales", "Oscillatoriales"))
ggplot(summary_df, aes(x=Order, y=PercentMutated, fill=Order)) +
geom_boxplot(outlier.shape=NA, alpha=0.7) +
geom_jitter(width=0.2, color="black", size=1, alpha=0.5) +
facet_wrap(~ Gene, ncol=1) +
labs(title="Percent Mutated Positions per Sequence",
y="Percent Mutated", x="Order") +
theme_minimal(base_size=12) +
theme(axis.text.x = element_text(angle=45, hjust=1))
library(ggplot2)
library(dplyr)
mutation_types_long <- read.csv("E:/Research/Research/MSA/feature_matrices/mutation_types_summary.csv")
library(ggplot2)
library(dplyr)
summary_file <- "E:/Research/Research/MSA/feature_matrices/mutation_matrix_summary.csv"
summary_df <- read.csv(summary_file)
summary_df$Gene <- factor(summary_df$Gene, levels=c("mcyA", "mcyB", "mcyE", "mcyH"))
summary_df$Order <- factor(summary_df$Order, levels=c("Chroococcales", "Nostocales", "Oscillatoriales"))
ggplot(summary_df, aes(x=Order, y=PercentMutated, fill=Order)) +
geom_boxplot(outlier.shape=NA, alpha=0.7) +
geom_jitter(width=0.2, color="black", size=1, alpha=0.5) +
facet_wrap(~ Gene, ncol=1) +
labs(title="Percent Mutated Positions per Sequence",
y="Percent Mutated", x="Order") +
theme_minimal(base_size=12) +
theme(axis.text.x = element_text(angle=45, hjust=1))
# Save the plot
plot_dir <- "E:/Research/Research/MSA/plots"
if (!dir.exists(plot_dir)) dir.create(plot_dir, recursive = TRUE)
plot_file <- file.path(plot_dir, "percent_mutated_per_sequence.png")
ggsave(plot_file, width=10, height=6, dpi=300)
cat("Plot saved to:", plot_file, "\n")
library(ggplot2)
library(dplyr)
library(readr)
# 1. Read mutation type summary data
mutation_types_long <- read_csv("E:/Research/Research/MSA/feature_matrices/mutation_types_summary.csv")
library(ggplot2)
library(dplyr)
library(readr)
# 1. Read the summary CSV
summary_file <- "E:/Research/Research/MSA/feature_matrices/mutation_matrix_summary.csv"
summary_df <- read_csv(summary_file)
# 2. Set factor levels for consistent ordering
summary_df$Gene <- factor(summary_df$Gene, levels=c("mcyA", "mcyB", "mcyE", "mcyH"))
summary_df$Order <- factor(summary_df$Order, levels=c("Chroococcales", "Nostocales", "Oscillatoriales"))
# 3. Summarize: mean percent mutated per gene/order
summary_bar <- summary_df %>%
group_by(Gene, Order) %>%
summarise(MeanPercentMutated = mean(PercentMutated, na.rm=TRUE), .groups="drop")
# 4. Bar plot: mean percent mutated per gene/order
p <- ggplot(summary_bar, aes(x=Order, y=MeanPercentMutated, fill=Order)) +
geom_bar(stat="identity", width=0.7) +
facet_wrap(~ Gene, ncol=1) +
labs(title="Mean Percent Mutated Positions per Gene and Order",
y="Mean Percent Mutated", x="Order") +
theme_minimal(base_size=12) +
theme(strip.text = element_text(size=14), legend.position="none", axis.text.x = element_text(angle=45, hjust=1))
# 5. Save the plot
plot_dir <- "E:/Research/Research/MSA/plots"
if (!dir.exists(plot_dir)) dir.create(plot_dir, recursive = TRUE)
barplot_file <- file.path(plot_dir, "mean_percent_mutated_barplot.png")
ggsave(barplot_file, p, width=10, height=6, dpi=300)
cat("Barplot saved to:", barplot_file, "\n")
library(ggplot2)
library(readr)
summary_bar <- read_csv("E:/Research/Research/MSA/feature_matrices/mutation_matrix_mean_summary.csv")
summary_bar$Gene <- factor(summary_bar$Gene, levels=c("mcyA", "mcyB", "mcyE", "mcyH"))
summary_bar$Order <- factor(summary_bar$Order, levels=c("Chroococcales", "Nostocales", "Oscillatoriales"))
ggplot(summary_bar, aes(x=Order, y=MeanPercentMutated, fill=Order)) +
geom_bar(stat="identity", width=0.7) +
facet_wrap(~ Gene, ncol=1) +
labs(title="Mean Percent Mutated Positions per Gene and Order",
y="Mean Percent Mutated", x="Order") +
theme_minimal(base_size=12) +
theme(strip.text = element_text(size=14), legend.position="none", axis.text.x = element_text(angle=45, hjust=1))
library(ggplot2)
library(readr)
library(dplyr)
# Read the mean summary CSV
summary_bar <- read_csv("E:/Research/Research/MSA/feature_matrices/mutation_matrix_mean_summary.csv")
# Set factor levels for consistent ordering
summary_bar$Gene <- factor(summary_bar$Gene, levels=c("mcyA", "mcyB", "mcyE", "mcyH"))
summary_bar$Order <- factor(summary_bar$Order, levels=c("Chroococcales", "Nostocales", "Oscillatoriales"))
# Grouped bar plot
ggplot(summary_bar, aes(x=Order, y=MeanPercentMutated, fill=Gene)) +
geom_bar(stat="identity", position=position_dodge(width=0.8), width=0.7) +
labs(title="Mean Percent Mutated Positions per Gene and Order",
y="Mean Percent Mutated", x="Order") +
theme_minimal(base_size=12) +
theme(axis.text.x = element_text(angle=45, hjust=1))
library(ggplot2)
library(readr)
summary_df <- read_csv("E:/Research/Research/MSA/feature_matrices/mutation_matrix_summary.csv")
summary_df$Gene <- factor(summary_df$Gene, levels=c("mcyA", "mcyB", "mcyE", "mcyH"))
summary_df$Order <- factor(summary_df$Order, levels=c("Chroococcales", "Nostocales", "Oscillatoriales"))
ggplot(summary_df, aes(x=Order, y=PercentMutated, color=Gene)) +
geom_jitter(width=0.2, size=1, alpha=0.7) +
facet_wrap(~ Gene, ncol=1) +
labs(title="Percent Mutated Positions per Sequence",
y="Percent Mutated", x="Order") +
theme_minimal(base_size=12) +
theme(axis.text.x = element_text(angle=45, hjust=1))
